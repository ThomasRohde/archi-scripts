// Comprehensive ArchiMate Relationship Matrix Generator

console.clear();
console.show();

const jarchiLogger = require('./lib/jarchiLogger');
const log = jarchiLogger.createLogger('RelationshipMatrixGenerator');

const elementTypes = [
    'stakeholder', 'driver', 'assessment', 'goal', 'outcome', 'principle', 'requirement', 'constraint', 'meaning', 'value',
    'resource', 'capability', 'course-of-action', 'value-stream',
    'business-actor', 'business-role', 'business-collaboration', 'business-interface', 'business-process', 'business-function', 'business-interaction', 'business-event', 'business-service', 'business-object', 'contract', 'representation', 'product',
    'application-component', 'application-collaboration', 'application-interface', 'application-function', 'application-process', 'application-interaction', 'application-event', 'application-service', 'data-object',
    'node', 'device', 'system-software', 'technology-collaboration', 'technology-interface', 'path', 'communication-network', 'technology-function', 'technology-process', 'technology-interaction', 'technology-event', 'technology-service', 'artifact',
    'equipment', 'facility', 'distribution-network', 'material',
    'work-package', 'deliverable', 'implementation-event', 'plateau', 'gap'
];

const relationships = [
    { type: 'serving-relationship', code: 'S' },
    { type: 'flow-relationship', code: 'F' },
    { type: 'access-relationship', code: 'A' },
    { type: 'influence-relationship', code: 'I' },
    { type: 'association-relationship', code: 'As' },
    { type: 'triggering-relationship', code: 'T' },
    { type: 'realization-relationship', code: 'R' },
    { type: 'composition-relationship', code: 'C' },
    { type: 'aggregation-relationship', code: 'Ag' },
    { type: 'assignment-relationship', code: 'As' },
    { type: 'specialization-relationship', code: 'Sp' }
];

function createElements() {
    let elements = {};
    elementTypes.forEach(type => {
        elements[type] = model.createElement(type, `Test ${type}`);
    });
    return elements;
}

function testRelationships(elements) {
    let allowedRelationships = {};
    elementTypes.forEach(sourceType => {
        allowedRelationships[sourceType] = {};
        elementTypes.forEach(targetType => {
            allowedRelationships[sourceType][targetType] = new Set();
            relationships.forEach(rel => {
                try {
                    let relationship = model.createRelationship(rel.type, `${sourceType} to ${targetType}`, elements[sourceType], elements[targetType]);
                    allowedRelationships[sourceType][targetType].add(rel.code);
                    model.deleteConcept(relationship); // Clean up after testing
                } catch (error) {
                    // Relationship not allowed, do nothing
                }
            });
        });
    });
    return allowedRelationships;
}

function generateMarkdownTable(allowedRelationships) {
    let table = '| Source \\ Target | ' + elementTypes.join(' | ') + ' |\n';
    table += '| ' + Array(elementTypes.length + 1).fill('---').join(' | ') + ' |\n';

    elementTypes.forEach(sourceType => {
        let row = `| ${sourceType} | `;
        elementTypes.forEach(targetType => {
            let allowedCodes = Array.from(allowedRelationships[sourceType][targetType]).join(',');
            row += (allowedCodes || '-') + ' | ';
        });
        table += row + '\n';
    });

    return table;
}

function generateMarkdownLegend() {
    let legend = "## Relationship Code Legend\n\n";
    legend += "| Code | Relationship Type |\n";
    legend += "| --- | --- |\n";
    relationships.forEach(rel => {
        legend += `| ${rel.code} | ${rel.type} |\n`;
    });
    return legend;
}

function generateDescription() {
    return `
# ArchiMate Relationship Matrix

This matrix provides a comprehensive overview of allowed relationships between ArchiMate elements. It is based on the ArchiMate 3.1 specification and has been generated using the Archi tool's implementation of the ArchiMate metamodel.

## How to Read This Matrix

- The rows represent source elements, and the columns represent target elements.
- Each cell contains a string of letters (or a dash if no relationships are allowed).
- Each letter in a cell represents an allowed relationship type between the source and target elements.
- The meaning of each letter code is explained in the legend below the matrix.

## Important Notes

1. This matrix shows all possible relationships as implemented in Archi. Some relationships might be technically possible but may not always make sense in all business contexts.
2. The matrix is read from row (source) to column (target). For example, to see what relationships are allowed from a 'business-actor' to a 'business-process', find 'business-actor' in the leftmost column and look across to the 'business-process' column.
3. A dash (-) indicates that no relationships are allowed between those elements.
4. This matrix can be used as a quick reference when creating ArchiMate models to ensure that relationships are used correctly according to the ArchiMate specification.

Please refer to the official ArchiMate documentation for more detailed information on when and how to use each relationship type.
`;
}

// Main execution
log.info("Creating elements...");
let elements = createElements();

log.info("Testing relationships...");
let allowedRelationships = testRelationships(elements);

log.info("Generating markdown content...");
let markdownContent = generateDescription() + "\n\n";
markdownContent += generateMarkdownTable(allowedRelationships) + "\n";
markdownContent += generateMarkdownLegend();

log.markdown(markdownContent);

// Clean up created elements
log.info("Cleaning up created elements...");
Object.values(elements).forEach(element => {
    element.delete();
});

log.info("Process completed.");