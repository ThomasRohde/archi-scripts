/**
 * @module IntegrationSettings
 * @description A script to manage integration settings for jArchi, including Confluence, Documentation Augmenter, Logger, and Anthropic
 * @version 7.1
 * @author Claude AI Assistant
 * @lastModifiedDate 2024-08-10
 */

console.clear();
console.show();

// Import necessary Java types
const SWT = Java.type("org.eclipse.swt.SWT");
const GridLayout = Java.type("org.eclipse.swt.layout.GridLayout");
const GridData = Java.type("org.eclipse.swt.layout.GridData");
const Label = Java.type("org.eclipse.swt.widgets.Label");
const Text = Java.type("org.eclipse.swt.widgets.Text");
const Button = Java.type("org.eclipse.swt.widgets.Button");
const Dialog = Java.extend(Java.type("org.eclipse.jface.dialogs.Dialog"));
const IDialogConstants = Java.type("org.eclipse.jface.dialogs.IDialogConstants");
const TabFolder = Java.type("org.eclipse.swt.widgets.TabFolder");
const TabItem = Java.type("org.eclipse.swt.widgets.TabItem");
const Composite = Java.type("org.eclipse.swt.widgets.Composite");
const Combo = Java.type("org.eclipse.swt.widgets.Combo");
const MessageDialog = Java.type("org.eclipse.jface.dialogs.MessageDialog");
const Display = Java.type("org.eclipse.swt.widgets.Display");
const File = Java.type("java.io.File");

// Import Ollama client
const { OllamaClient } = require("./lib/ollamaClient");

// Import Anthropic client
const { MODELS: ANTHROPIC_MODELS } = require("./lib/anthropicClient");

// Import OpenAI client
const { ROLES: OPENAI_ROLES } = require("./lib/openaiClient");

// Initialize logger
const jarchiLogger = require("./lib/jarchiLogger");
const log = jarchiLogger.createLogger("Settings", __DIR__);

// Then use it as before:
log.info("Entering settings");

// Global constants
const DEFAULT_MODELS = ["llama3.1"];
let OLLAMA_MODELS = [];

// Flag to indicate if Ollama is installed and should be used
const OLLAMA_INSTALLED = true; // Set this to false if Ollama is not installed

function fetchOllamaModels() {
    if (!OLLAMA_INSTALLED) {
        log.warn("Ollama is not installed. Skipping model fetch.");
        return Promise.resolve([]);
    }
    log.info("Fetching Ollama models...");
    const ollama = new OllamaClient("http://localhost:11434");
    return ollama
        .listModels()
        .then((models) => {
            log.info("Fetched Ollama models:", models);
            return models.map((model) => model.name);
        })
        .catch((error) => {
            log.error("Error fetching Ollama models:", error);
            return [];
        });
}

const integrationSettingsDialog = {
    confluenceSettings: {
        username: "",
        apiToken: "",
        spaceKey: "",
        baseUrl: "",
    },
    ollama: {
        model: "llama3.1",
        temperature: "0.7",
        topK: "40",
        topP: "0.9",
    },
    modelCombo: null,
    loggerSettings: {
        enabled: false,
        apiUrl: "http://localhost:4000",
        consoleLogging: true,
        markdownLogging: false,
        logLevel: "INFO",
        logRetentionPeriod: "7",
        logRetentionUnit: "days",
    },
    anthropicSettings: {
        apiKey: "",
        model: "claude-3-sonnet-20240229",
        maxTokens: "1000",
        temperature: "0.7",
        topP: "0.9",
        topK: "40",
    },
    openAISettings: {
        apiKey: "",
        model: "gpt-4o-mini",
        maxTokens: "4096",
        temperature: "0.7",
        topP: "1",
    },

    open: function () {
        this.loadSettings();
        return new Promise((resolve) => {
            fetchOllamaModels().then((models) => {
                OLLAMA_MODELS = models;
                log.info("Initialized Ollama models:", OLLAMA_MODELS);
                Display.getDefault().asyncExec(() => {
                    const result = this.dialog.open();
                    resolve(result === 0); // OK = 0, Cancel = 1
                });
            });
        });
    },

    loadSettings: function () {
        const preferenceStore = workbench.getPreferenceStore();
        // Load Confluence settings
        this.confluenceSettings.username = preferenceStore.getString("confluenceUsername") || "";
        this.confluenceSettings.apiToken = preferenceStore.getString("confluencePassword") || "";
        this.confluenceSettings.spaceKey = preferenceStore.getString("confluenceDefaultSpaceKey") || "";
        this.confluenceSettings.baseUrl = preferenceStore.getString("confluenceBaseUrl") || "";
        // Load Ollama settings
        this.ollama.model = preferenceStore.getString("ollamaModel") || "llama3.1";
        this.ollama.temperature = preferenceStore.getString("ollamaTemperature") || "0.7";
        this.ollama.topK = preferenceStore.getString("ollamaTopK") || "40";
        this.ollama.topP = preferenceStore.getString("ollamaTopP") || "0.9";
        // Load Logger settings
        this.loggerSettings.enabled = preferenceStore.getBoolean("loggerEnabled") || false;
        this.loggerSettings.apiUrl = preferenceStore.getString("loggerApiUrl") || "http://localhost:4000";
        this.loggerSettings.logRetentionPeriod = preferenceStore.getString("loggerRetentionPeriod") || "7";
        this.loggerSettings.logRetentionUnit = preferenceStore.getString("loggerRetentionUnit") || "days";
        this.loggerSettings.consoleLogging = preferenceStore.getBoolean("loggerConsoleLogging") || false;
        this.loggerSettings.markdownLogging = preferenceStore.getBoolean("loggerMarkdownLogging") || false;
        this.loggerSettings.logLevel = preferenceStore.getString("loggerLogLevel") || "INFO";
        this.loggerSettings.webPort = preferenceStore.getString("loggerWebPort") || "4001";
        // Load Anthropic settings
        this.anthropicSettings.apiKey = preferenceStore.getString("anthropicApiKey") || "";
        this.anthropicSettings.model = preferenceStore.getString("anthropicModel") || "claude-3-sonnet-20240229";
        this.anthropicSettings.maxTokens = preferenceStore.getString("anthropicMaxTokens") || "1000";
        this.anthropicSettings.temperature = preferenceStore.getString("anthropicTemperature") || "0.7";
        this.anthropicSettings.topP = preferenceStore.getString("anthropicTopP") || "0.9";
        this.anthropicSettings.topK = preferenceStore.getString("anthropicTopK") || "40";
        // Load OpenAI settings
        this.openAISettings.apiKey = preferenceStore.getString("openaiApiKey") || "";
        this.openAISettings.model = preferenceStore.getString("openaiModel") || "gpt-4o-mini";
        this.openAISettings.maxTokens = preferenceStore.getString("openaiMaxTokens") || "1024";
        this.openAISettings.temperature = preferenceStore.getString("openaiTemperature") || "0.7";
        this.openAISettings.topP = preferenceStore.getString("openaiTopP") || "1";
    },

    saveSettings: function () {
        const preferenceStore = workbench.getPreferenceStore();
        // Save Confluence settings
        preferenceStore.setValue("confluenceUsername", this.confluenceSettings.username);
        preferenceStore.setValue("confluencePassword", this.confluenceSettings.apiToken);
        preferenceStore.setValue("confluenceDefaultSpaceKey", this.confluenceSettings.spaceKey);
        preferenceStore.setValue("confluenceBaseUrl", this.confluenceSettings.baseUrl);
        // Save Ollama settings
        preferenceStore.setValue("ollamaModel", this.ollama.model);
        preferenceStore.setValue("ollamaTemperature", this.ollama.temperature);
        preferenceStore.setValue("ollamaTopK", this.ollama.topK);
        preferenceStore.setValue("ollamaTopP", this.ollama.topP);
        // Save Logger settings
        preferenceStore.setValue("loggerEnabled", this.loggerSettings.enabled);
        preferenceStore.setValue("loggerApiUrl", this.loggerSettings.apiUrl);
        preferenceStore.setValue("loggerRetentionPeriod", this.loggerSettings.logRetentionPeriod);
        preferenceStore.setValue("loggerRetentionUnit", this.loggerSettings.logRetentionUnit);
        preferenceStore.setValue("loggerConsoleLogging", this.loggerSettings.consoleLogging);
        preferenceStore.setValue("loggerMarkdownLogging", this.loggerSettings.markdownLogging);
        preferenceStore.setValue("loggerLogLevel", this.loggerSettings.logLevel);
        preferenceStore.setValue("loggerWebPort", this.loggerSettings.webPort);
        // Save Anthropic settings
        preferenceStore.setValue("anthropicApiKey", this.anthropicSettings.apiKey);
        preferenceStore.setValue("anthropicModel", this.anthropicSettings.model);
        preferenceStore.setValue("anthropicMaxTokens", this.anthropicSettings.maxTokens);
        preferenceStore.setValue("anthropicTemperature", this.anthropicSettings.temperature);
        preferenceStore.setValue("anthropicTopP", this.anthropicSettings.topP);
        preferenceStore.setValue("anthropicTopK", this.anthropicSettings.topK);
        // Save OpenAI settings
        preferenceStore.setValue("openaiApiKey", this.openAISettings.apiKey);
        preferenceStore.setValue("openaiModel", this.openAISettings.model);
        preferenceStore.setValue("openaiMaxTokens", this.openAISettings.maxTokens);
        preferenceStore.setValue("openaiTemperature", this.openAISettings.temperature);
        preferenceStore.setValue("openaiTopP", this.openAISettings.topP);
    },

    dialog: new Dialog(shell, {
        configureShell: function (newShell) {
            Java.super(integrationSettingsDialog.dialog).configureShell(newShell);
            newShell.setText("Integration Settings");
            newShell.setSize(800, 600);
        },

        createDialogArea: function (parent) {
            const container = Java.super(integrationSettingsDialog.dialog).createDialogArea(parent);
            container.setLayoutData(new GridData(GridData.FILL_BOTH));
            container.setLayout(new GridLayout(1, false));

            const tabFolder = new TabFolder(container, SWT.NONE);
            tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));

            this.createConfluenceTab(tabFolder);
            this.createOllamaTab(tabFolder);
            this.createLoggerTab(tabFolder);
            this.createAnthropicTab(tabFolder);
            this.createOpenAITab(tabFolder);  // Add t

            return container;
        },

        createConfluenceTab: function (tabFolder) {
            const confluenceTab = new TabItem(tabFolder, SWT.NONE);
            confluenceTab.setText("Confluence");

            const composite = new Composite(tabFolder, SWT.NONE);
            composite.setLayout(new GridLayout(2, false));
            confluenceTab.setControl(composite);

            // Username (Email)
            new Label(composite, SWT.NONE).setText("Username (Email):");
            const usernameText = new Text(composite, SWT.BORDER);
            usernameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            usernameText.setText(integrationSettingsDialog.confluenceSettings.username);
            usernameText.addModifyListener(
                (e) => (integrationSettingsDialog.confluenceSettings.username = usernameText.getText())
            );

            // API Token
            new Label(composite, SWT.NONE).setText("API Token:");
            const apiTokenText = new Text(composite, SWT.BORDER | SWT.PASSWORD);
            apiTokenText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            apiTokenText.setText(integrationSettingsDialog.confluenceSettings.apiToken);
            apiTokenText.addModifyListener(
                (e) => (integrationSettingsDialog.confluenceSettings.apiToken = apiTokenText.getText())
            );

            // Space Key
            new Label(composite, SWT.NONE).setText("Space Key:");
            const spaceKeyText = new Text(composite, SWT.BORDER);
            spaceKeyText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            spaceKeyText.setText(integrationSettingsDialog.confluenceSettings.spaceKey);
            spaceKeyText.addModifyListener(
                (e) => (integrationSettingsDialog.confluenceSettings.spaceKey = spaceKeyText.getText())
            );

            // Base URL
            new Label(composite, SWT.NONE).setText("Base URL:");
            const baseUrlText = new Text(composite, SWT.BORDER);
            baseUrlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            baseUrlText.setText(integrationSettingsDialog.confluenceSettings.baseUrl);
            baseUrlText.addModifyListener(
                (e) => (integrationSettingsDialog.confluenceSettings.baseUrl = baseUrlText.getText())
            );
        },

        createOllamaTab: function (tabFolder) {
            const docAugmenterTab = new TabItem(tabFolder, SWT.NONE);
            docAugmenterTab.setText("Ollama");

            const composite = new Composite(tabFolder, SWT.NONE);
            composite.setLayout(new GridLayout(2, false));
            docAugmenterTab.setControl(composite);

            // Model
            new Label(composite, SWT.NONE).setText("Model:");
            integrationSettingsDialog.modelCombo = new Combo(composite, SWT.READ_ONLY);
            integrationSettingsDialog.modelCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));

            this.populateModelCombo();

            integrationSettingsDialog.modelCombo.setText(integrationSettingsDialog.ollama.model);
            integrationSettingsDialog.modelCombo.addModifyListener((e) => {
                integrationSettingsDialog.ollama.model = integrationSettingsDialog.modelCombo.getText();
            });

            // Temperature
            new Label(composite, SWT.NONE).setText("Temperature:");
            const temperatureText = new Text(composite, SWT.BORDER);
            temperatureText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            temperatureText.setText(integrationSettingsDialog.ollama.temperature);
            temperatureText.addModifyListener(
                (e) => (integrationSettingsDialog.ollama.temperature = temperatureText.getText())
            );

            // Top K
            new Label(composite, SWT.NONE).setText("Top K:");
            const topKText = new Text(composite, SWT.BORDER);
            topKText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            topKText.setText(integrationSettingsDialog.ollama.topK);
            topKText.addModifyListener((e) => (integrationSettingsDialog.ollama.topK = topKText.getText()));

            // Top P
            new Label(composite, SWT.NONE).setText("Top P:");
            const topPText = new Text(composite, SWT.BORDER);
            topPText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            topPText.setText(integrationSettingsDialog.ollama.topP);
            topPText.addModifyListener((e) => (integrationSettingsDialog.ollama.topP = topPText.getText()));
        },

        createLoggerTab: function (tabFolder) {
            const loggerTab = new TabItem(tabFolder, SWT.NONE);
            loggerTab.setText("Logger");

            const composite = new Composite(tabFolder, SWT.NONE);
            composite.setLayout(new GridLayout(2, false));
            loggerTab.setControl(composite);

            // Enable Logging
            const enableLoggingButton = new Button(composite, SWT.CHECK);
            enableLoggingButton.setText("Enable Remote Logging");
            enableLoggingButton.setSelection(integrationSettingsDialog.loggerSettings.enabled);
            enableLoggingButton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 2, 1));
            enableLoggingButton.addSelectionListener({
                widgetSelected: function (e) {
                    integrationSettingsDialog.loggerSettings.enabled = enableLoggingButton.getSelection();
                },
            });

            // Logger API URL
            new Label(composite, SWT.NONE).setText("Logger API URL:");
            const apiUrlText = new Text(composite, SWT.BORDER);
            apiUrlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            apiUrlText.setText(integrationSettingsDialog.loggerSettings.apiUrl);
            apiUrlText.addModifyListener(
                (e) => (integrationSettingsDialog.loggerSettings.apiUrl = apiUrlText.getText())
            );

            // Web Server Port
            new Label(composite, SWT.NONE).setText("Web Server Port:");
            const webPortText = new Text(composite, SWT.BORDER);
            webPortText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            webPortText.setText(integrationSettingsDialog.loggerSettings.webPort);
            webPortText.setEnabled(false);
            webPortText.addModifyListener(
                (e) => (integrationSettingsDialog.loggerSettings.webPort = webPortText.getText())
            );

            // Start Logger Button
            const startLoggerButton = new Button(composite, SWT.PUSH);
            startLoggerButton.setText("Start Logger");
            startLoggerButton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 2, 1));
            startLoggerButton.setEnabled(false);
            startLoggerButton.addSelectionListener({
                widgetSelected: function (e) {
                    startLoggerExecutable();
                },
            });

            // Log Retention Period
            new Label(composite, SWT.NONE).setText("Log Retention Period:");
            const retentionComposite = new Composite(composite, SWT.NONE);
            retentionComposite.setLayout(new GridLayout(2, false));
            retentionComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));

            const retentionText = new Text(retentionComposite, SWT.BORDER);
            retentionText.setLayoutData(new GridData(50, SWT.DEFAULT));
            retentionText.setText(integrationSettingsDialog.loggerSettings.logRetentionPeriod);
            retentionText.addModifyListener(
                (e) => (integrationSettingsDialog.loggerSettings.logRetentionPeriod = retentionText.getText())
            );

            const retentionUnitCombo = new Combo(retentionComposite, SWT.READ_ONLY);
            retentionUnitCombo.setItems(["days", "hours", "minutes"]);
            retentionUnitCombo.setText(integrationSettingsDialog.loggerSettings.logRetentionUnit);
            retentionUnitCombo.addModifyListener(
                (e) => (integrationSettingsDialog.loggerSettings.logRetentionUnit = retentionUnitCombo.getText())
            );

            // Console Logging
            const consoleLoggingButton = new Button(composite, SWT.CHECK);
            consoleLoggingButton.setText("Enable Console Logging");
            consoleLoggingButton.setSelection(integrationSettingsDialog.loggerSettings.consoleLogging);
            consoleLoggingButton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 2, 1));
            consoleLoggingButton.addSelectionListener({
                widgetSelected: function (e) {
                    integrationSettingsDialog.loggerSettings.consoleLogging = consoleLoggingButton.getSelection();
                },
            });

            // Markdown Logging
            const markdownLoggingButton = new Button(composite, SWT.CHECK);
            markdownLoggingButton.setText("Enable Markdown Logging");
            markdownLoggingButton.setSelection(integrationSettingsDialog.loggerSettings.markdownLogging);
            markdownLoggingButton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 2, 1));
            markdownLoggingButton.addSelectionListener({
                widgetSelected: function (e) {
                    integrationSettingsDialog.loggerSettings.markdownLogging = markdownLoggingButton.getSelection();
                },
            });

            // Log level
            new Label(composite, SWT.NONE).setText("Log Level:");
            const logLevelCombo = new Combo(composite, SWT.READ_ONLY);
            logLevelCombo.setItems(["DEBUG", "INFO", "WARN", "ERROR"]);
            logLevelCombo.setText(integrationSettingsDialog.loggerSettings.logLevel);
            logLevelCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            logLevelCombo.addModifyListener(
                (e) => (integrationSettingsDialog.loggerSettings.logLevel = logLevelCombo.getText())
            );

            function updateWebPortAndButtonState() {
                const isLocalhost =
                    apiUrlText.getText().includes("localhost") || apiUrlText.getText().includes("127.0.0.1");
                webPortText.setEnabled(isLocalhost);
                startLoggerButton.setEnabled(isLocalhost);
            }

            // Call this function when the API URL changes
            apiUrlText.addModifyListener((e) => {
                integrationSettingsDialog.loggerSettings.apiUrl = apiUrlText.getText();
                updateWebPortAndButtonState();
            });

            // Call this function initially to set the correct state
            updateWebPortAndButtonState();

            function startLoggerExecutable() {
                const apiPort = apiUrlText.getText().split(":")[2] || "4000";
                const webPort = webPortText.getText() || "4001";
                const isWindows = java.lang.System.getProperty("os.name").toLowerCase().includes("win");
                const executableName = isWindows ? "jarchi-logger-win.exe" : "jarchi-logger-macos";

                // Construct the path to the jarchi-logger executable
                const executableFile = new File(
                    new File(__DIR__).getParentFile(),
                    "jarchi-logger" + File.separator + executableName
                );
                const executablePath = executableFile.getAbsolutePath();
                log.info(executablePath);
                const command = `"${executablePath}" --api-port ${apiPort} --web-port ${webPort}`;

                const runtime = java.lang.Runtime.getRuntime();
                try {
                    runtime.exec(command);
                    log.info(`Started logger executable: ${command}`);
                } catch (error) {
                    log.error(`Failed to start logger executable: ${error}`);
                    MessageDialog.openError(shell, "Error", `Failed to start logger executable: ${error}`);
                }
            }
        },

        createAnthropicTab: function (tabFolder) {
            const anthropicTab = new TabItem(tabFolder, SWT.NONE);
            anthropicTab.setText("Anthropic");

            const composite = new Composite(tabFolder, SWT.NONE);
            composite.setLayout(new GridLayout(2, false));
            anthropicTab.setControl(composite);

            // API Key
            new Label(composite, SWT.NONE).setText("API Key:");
            const apiKeyText = new Text(composite, SWT.BORDER | SWT.PASSWORD);
            apiKeyText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            apiKeyText.setText(integrationSettingsDialog.anthropicSettings.apiKey);
            apiKeyText.addModifyListener(
                (e) => (integrationSettingsDialog.anthropicSettings.apiKey = apiKeyText.getText())
            );

            // Model
            new Label(composite, SWT.NONE).setText("Model:");
            const modelCombo = new Combo(composite, SWT.READ_ONLY);
            modelCombo.setItems(ANTHROPIC_MODELS);
            modelCombo.setText(integrationSettingsDialog.anthropicSettings.model);
            modelCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            modelCombo.addModifyListener(
                (e) => (integrationSettingsDialog.anthropicSettings.model = modelCombo.getText())
            );

            // Max Tokens
            new Label(composite, SWT.NONE).setText("Max Tokens:");
            const maxTokensText = new Text(composite, SWT.BORDER);
            maxTokensText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            maxTokensText.setText(integrationSettingsDialog.anthropicSettings.maxTokens);
            maxTokensText.addModifyListener(
                (e) => (integrationSettingsDialog.anthropicSettings.maxTokens = maxTokensText.getText())
            );

            // Temperature
            new Label(composite, SWT.NONE).setText("Temperature:");
            const temperatureText = new Text(composite, SWT.BORDER);
            temperatureText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            temperatureText.setText(integrationSettingsDialog.anthropicSettings.temperature);
            temperatureText.addModifyListener(
                (e) => (integrationSettingsDialog.anthropicSettings.temperature = temperatureText.getText())
            );

            // Top P
            new Label(composite, SWT.NONE).setText("Top P:");
            const topPText = new Text(composite, SWT.BORDER);
            topPText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            topPText.setText(integrationSettingsDialog.anthropicSettings.topP);
            topPText.addModifyListener((e) => (integrationSettingsDialog.anthropicSettings.topP = topPText.getText()));

            // Top K
            new Label(composite, SWT.NONE).setText("Top K:");
            const topKText = new Text(composite, SWT.BORDER);
            topKText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            topKText.setText(integrationSettingsDialog.anthropicSettings.topK);
            topKText.addModifyListener((e) => (integrationSettingsDialog.anthropicSettings.topK = topKText.getText()));
        },

        createOpenAITab: function (tabFolder) {
            const openAITab = new TabItem(tabFolder, SWT.NONE);
            openAITab.setText("OpenAI");
        
            const composite = new Composite(tabFolder, SWT.NONE);
            composite.setLayout(new GridLayout(2, false));
            openAITab.setControl(composite);
        
            // API Key
            new Label(composite, SWT.NONE).setText("API Key:");
            const apiKeyText = new Text(composite, SWT.BORDER | SWT.PASSWORD);
            apiKeyText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            apiKeyText.setText(integrationSettingsDialog.openAISettings.apiKey);
            apiKeyText.addModifyListener(
                (e) => (integrationSettingsDialog.openAISettings.apiKey = apiKeyText.getText())
            );
        
            // Model
            new Label(composite, SWT.NONE).setText("Model:");
            const modelText = new Text(composite, SWT.BORDER);
            modelText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            modelText.setText(integrationSettingsDialog.openAISettings.model);
            modelText.addModifyListener(
                (e) => (integrationSettingsDialog.openAISettings.model = modelText.getText())
            );
        
            // Max Tokens
            new Label(composite, SWT.NONE).setText("Max Tokens:");
            const maxTokensText = new Text(composite, SWT.BORDER);
            maxTokensText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            maxTokensText.setText(integrationSettingsDialog.openAISettings.maxTokens);
            maxTokensText.addModifyListener(
                (e) => (integrationSettingsDialog.openAISettings.maxTokens = maxTokensText.getText())
            );
        
            // Temperature
            new Label(composite, SWT.NONE).setText("Temperature:");
            const temperatureText = new Text(composite, SWT.BORDER);
            temperatureText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            temperatureText.setText(integrationSettingsDialog.openAISettings.temperature);
            temperatureText.addModifyListener(
                (e) => (integrationSettingsDialog.openAISettings.temperature = temperatureText.getText())
            );
        
            // Top P
            new Label(composite, SWT.NONE).setText("Top P:");
            const topPText = new Text(composite, SWT.BORDER);
            topPText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            topPText.setText(integrationSettingsDialog.openAISettings.topP);
            topPText.addModifyListener(
                (e) => (integrationSettingsDialog.openAISettings.topP = topPText.getText())
            );
        },

        populateModelCombo: function () {
            // Combine Ollama models and default models, removing duplicates
            const allModels = [...new Set([...OLLAMA_MODELS, ...DEFAULT_MODELS])];
            allModels.forEach((model) => integrationSettingsDialog.modelCombo.add(model));
        },

        createButtonsForButtonBar: function (parent) {
            Java.super(integrationSettingsDialog.dialog).createButton(parent, IDialogConstants.OK_ID, "Save", true);
            Java.super(integrationSettingsDialog.dialog).createButton(
                parent,
                IDialogConstants.CANCEL_ID,
                "Cancel",
                false
            );
        },

        okPressed: function () {
            integrationSettingsDialog.saveSettings();
            Java.super(integrationSettingsDialog.dialog).okPressed();
        },
    }),
};

// Run the Integration settings dialog
integrationSettingsDialog
    .open()
    .then((result) => {
        if (result) {
            log.info("Integration settings saved successfully.");
        } else {
            log.warn("Integration settings update cancelled.");
        }
    })
    .catch((error) => {
        log.error("Error in settings dialog:", error);
        Display.getDefault().asyncExec(() => {
            MessageDialog.openError(shell, "Error", "An error occurred: " + error.message);
        });
    });
