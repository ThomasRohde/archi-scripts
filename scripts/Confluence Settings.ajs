/**
 * @module ConfluenceSettings
 * @description A script to manage Confluence integration settings for jArchi
 * @version 1.2
 * @author Claude AI Assistant
 * @lastModifiedDate 2024-07-29
 */

console.clear();
console.show();

// Import necessary Java types
const SWT = Java.type('org.eclipse.swt.SWT');
const GridLayout = Java.type('org.eclipse.swt.layout.GridLayout');
const GridData = Java.type('org.eclipse.swt.layout.GridData');
const Label = Java.type('org.eclipse.swt.widgets.Label');
const Text = Java.type('org.eclipse.swt.widgets.Text');
const Button = Java.type('org.eclipse.swt.widgets.Button');
const Dialog = Java.extend(Java.type('org.eclipse.jface.dialogs.Dialog'));
const IDialogConstants = Java.type('org.eclipse.jface.dialogs.IDialogConstants');

const confluenceSettingsDialog = {
    settings: {
        username: '',
        apiToken: '',
        spaceKey: '',
        baseUrl: ''
    },

    open: function() {
        this.loadSettings();
        return this.dialog.open() === 0; // OK = 0, Cancel = 1
    },

    loadSettings: function() {
        const preferenceStore = workbench.getPreferenceStore();
        this.settings.username = preferenceStore.getString('confluenceUsername') || '';
        this.settings.apiToken = preferenceStore.getString('confluencePassword') || '';
        this.settings.spaceKey = preferenceStore.getString('confluenceDefaultSpaceKey') || '';
        this.settings.baseUrl = preferenceStore.getString('confluenceBaseUrl') || '';
    },

    saveSettings: function() {
        const preferenceStore = workbench.getPreferenceStore();
        preferenceStore.setValue('confluenceUsername', this.settings.username);
        preferenceStore.setValue('confluencePassword', this.settings.apiToken);
        preferenceStore.setValue('confluenceDefaultSpaceKey', this.settings.spaceKey);
        preferenceStore.setValue('confluenceBaseUrl', this.settings.baseUrl);
    },

    dialog: new Dialog(shell, {
        configureShell: function(newShell) {
            Java.super(confluenceSettingsDialog.dialog).configureShell(newShell);
            newShell.setText("Confluence Settings");
            newShell.setSize(400, 300);
        },

        createDialogArea: function(parent) {
            const container = Java.super(confluenceSettingsDialog.dialog).createDialogArea(parent);
            const layout = new GridLayout(2, false);
            layout.marginWidth = 10;
            layout.marginHeight = 10;
            container.setLayout(layout);

            // Username (Email)
            new Label(container, SWT.NONE).setText("Username (Email):");
            const usernameText = new Text(container, SWT.BORDER);
            usernameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            usernameText.setText(confluenceSettingsDialog.settings.username);
            usernameText.addModifyListener(e => confluenceSettingsDialog.settings.username = usernameText.getText());

            // API Token
            new Label(container, SWT.NONE).setText("API Token:");
            const apiTokenText = new Text(container, SWT.BORDER | SWT.PASSWORD);
            apiTokenText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            apiTokenText.setText(confluenceSettingsDialog.settings.apiToken);
            apiTokenText.addModifyListener(e => confluenceSettingsDialog.settings.apiToken = apiTokenText.getText());

            // Space Key
            new Label(container, SWT.NONE).setText("Space Key:");
            const spaceKeyText = new Text(container, SWT.BORDER);
            spaceKeyText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            spaceKeyText.setText(confluenceSettingsDialog.settings.spaceKey);
            spaceKeyText.addModifyListener(e => confluenceSettingsDialog.settings.spaceKey = spaceKeyText.getText());

            // Base URL
            new Label(container, SWT.NONE).setText("Base URL:");
            const baseUrlText = new Text(container, SWT.BORDER);
            baseUrlText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
            baseUrlText.setText(confluenceSettingsDialog.settings.baseUrl);
            baseUrlText.addModifyListener(e => confluenceSettingsDialog.settings.baseUrl = baseUrlText.getText());

            return container;
        },

        createButtonsForButtonBar: function(parent) {
            Java.super(confluenceSettingsDialog.dialog).createButton(parent, IDialogConstants.OK_ID, "Save", true);
            Java.super(confluenceSettingsDialog.dialog).createButton(parent, IDialogConstants.CANCEL_ID, "Cancel", false);
        },

        okPressed: function() {
            confluenceSettingsDialog.saveSettings();
            Java.super(confluenceSettingsDialog.dialog).okPressed();
        }
    })
};

// Run the Confluence settings dialog
if (confluenceSettingsDialog.open()) {
    console.log("Confluence settings saved successfully.");
} else {
    console.log("Confluence settings update cancelled.");
}