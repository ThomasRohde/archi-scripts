/**
 * @module EnhancedModelHealthCheck
 * @description A comprehensive model health check utility for Archi with chart visualizations
 * @version 2.0
 * @author Claude AI Assistant
 * @lastModifiedDate 2024-07-28
 */

const SWT = Java.type("org.eclipse.swt.SWT");
const GridDataFactory = Java.type("org.eclipse.jface.layout.GridDataFactory");
const GridLayoutFactory = Java.type("org.eclipse.jface.layout.GridLayoutFactory");
const TitleAreaDialog = Java.type("org.eclipse.jface.dialogs.TitleAreaDialog");
const TabFolder = Java.type("org.eclipse.swt.widgets.TabFolder");
const TabItem = Java.type("org.eclipse.swt.widgets.TabItem");
const Table = Java.type("org.eclipse.swt.widgets.Table");
const TableItem = Java.type("org.eclipse.swt.widgets.TableItem");
const TableColumn = Java.type("org.eclipse.swt.widgets.TableColumn");
const Label = Java.type("org.eclipse.swt.widgets.Label");
const Button = Java.type("org.eclipse.swt.widgets.Button");
const Composite = Java.type("org.eclipse.swt.widgets.Composite");
const MessageDialog = Java.type("org.eclipse.jface.dialogs.MessageDialog");
const Display = Java.type("org.eclipse.swt.widgets.Display");
const IMessageProvider = Java.type("org.eclipse.jface.dialogs.IMessageProvider");
const Color = Java.type("org.eclipse.swt.graphics.Color");
const RGB = Java.type("org.eclipse.swt.graphics.RGB");
const IDialogConstants = Java.type("org.eclipse.jface.dialogs.IDialogConstants");

// Initialize logger
const jarchiLogger = require('./lib/jarchiLogger');
const log = jarchiLogger.createLogger('Model Health Check');

// Import the chartjsUtility module
const chartjsUtility = require("./lib/chartjsUtility");

const modelHealthCheck = {
    model: null,
    results: {
        elements: 0,
        relationships: 0,
        views: 0,
        unusedElements: [],
        missingDocumentation: [],
        viewComplexity: [],
        elementTypes: {},
    },

    run: function () {
        this.model = $.model;
        if (!this.model) {
            log.error("No model found.");
            return;
        }

        this.analyzeModel();
        this.showDialog();
    },

    analyzeModel: function () {
        this.results.elements = $("element").size();
        this.results.relationships = $("relationship").size();
        this.results.views = $("view").size();

        $("element").each((element) => {
            if ($(element).viewRefs().size() === 0) {
                this.results.unusedElements.push(element);
            }
            if (!element.documentation) {
                this.results.missingDocumentation.push(element);
            }
            this.results.elementTypes[element.type] = (this.results.elementTypes[element.type] || 0) + 1;
        });

        $("view").each((view) => {
            this.results.viewComplexity.push({
                name: view.name,
                elements: $(view).children("element").size(),
                relationships: $(view).children("relationship").size(),
            });
        });
    },

    showDialog: function () {
        this.dialog.open();
    },

    dialog: new (Java.extend(TitleAreaDialog))(shell, {
        configureShell: function (newShell) {
            Java.super(modelHealthCheck.dialog).configureShell(newShell);
            newShell.setText("Enhanced Model Health Check");
            newShell.setSize(1200, 800);
        },

        createDialogArea: function (parent) {
            const area = Java.super(modelHealthCheck.dialog).createDialogArea(parent);
            GridDataFactory.fillDefaults().grab(true, true).applyTo(area);

            modelHealthCheck.dialog.setTitle("Enhanced Model Health Check");
            modelHealthCheck.dialog.setMessage(
                "Model health check completed. Review the results and recommendations.",
                IMessageProvider.INFORMATION
            );

            const tabFolder = new TabFolder(area, SWT.NONE);
            GridDataFactory.fillDefaults().grab(true, true).applyTo(tabFolder);

            modelHealthCheck.createSummaryTab(tabFolder);
            modelHealthCheck.createElementTypesTab(tabFolder);
            modelHealthCheck.createUnusedElementsTab(tabFolder);
            modelHealthCheck.createViewComplexityTab(tabFolder);
            modelHealthCheck.createRecommendationsTab(tabFolder);

            return area;
        },

        createButtonsForButtonBar: function (parent) {
            Java.super(modelHealthCheck.dialog).createButton(parent, IDialogConstants.OK_ID, "Close", true);
        },

        okPressed: function () {
            Java.super(modelHealthCheck.dialog).okPressed();
        },

        createHelpControl: function (parent) {
            const help = Java.super(modelHealthCheck.dialog).createHelpControl(parent);
            help.setVisible(false);
            return help;
        },
    }),

    createSummaryTab: function (tabFolder) {
        const tab = new TabItem(tabFolder, SWT.NONE);
        tab.setText("Summary");

        const composite = new Composite(tabFolder, SWT.NONE);
        tab.setControl(composite);
        GridLayoutFactory.fillDefaults().numColumns(1).margins(10, 10).applyTo(composite);

        const chartConfig = {
            type: "doughnut",
            data: {
                labels: ["Elements", "Relationships", "Views"],
                datasets: [
                    {
                        data: [this.results.elements, this.results.relationships, this.results.views],
                        backgroundColor: ["#FF6384", "#36A2EB", "#FFCE56"],
                    },
                ],
            },
            options: {
                plugins: {
                    title: {
                        display: true,
                        text: "Model Composition",
                    },
                },
            },
        };

        const chartBrowser = chartjsUtility.createChartWidget(
            composite,
            chartjsUtility.enhanceChartConfig(chartConfig)
        );
        GridDataFactory.fillDefaults().grab(true, true).hint(SWT.DEFAULT, 400).applyTo(chartBrowser);
    },

    createElementTypesTab: function (tabFolder) {
        const tab = new TabItem(tabFolder, SWT.NONE);
        tab.setText("Element Types");

        const composite = new Composite(tabFolder, SWT.NONE);
        tab.setControl(composite);
        GridLayoutFactory.fillDefaults().numColumns(1).margins(10, 10).applyTo(composite);

        const labels = Object.keys(this.results.elementTypes);
        const data = Object.values(this.results.elementTypes);

        const chartConfig = {
            type: "bar",
            data: {
                labels: labels,
                datasets: [
                    {
                        label: "Count",
                        data: data,
                        backgroundColor: "rgba(75, 192, 192, 0.6)",
                        borderColor: "rgba(75, 192, 192, 1)",
                        borderWidth: 1,
                    },
                ],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: "Element Types Distribution",
                    },
                    legend: {
                        display: false, // Hide legend as it's not needed for this chart
                    },
                    tooltip: {
                        mode: "index",
                        intersect: false,
                    },
                },
                scales: {
                    x: {
                        ticks: {
                            autoSkip: false,
                            maxRotation: 90,
                            minRotation: 0,
                        },
                    },
                    y: {
                        beginAtZero: true,
                    },
                },
                onHover: null, // Disable hover effects
                hover: {
                    mode: null, // Disable hover mode
                },
                animation: {
                    duration: 0, // Disable animations for better performance
                },
            },
        };

        const chartBrowser = chartjsUtility.createChartWidget(
            composite,
            chartjsUtility.enhanceChartConfig(chartConfig)
        );
        GridDataFactory.fillDefaults().grab(true, true).hint(SWT.DEFAULT, 400).applyTo(chartBrowser);
    },

    createUnusedElementsTab: function (tabFolder) {
        const tab = new TabItem(tabFolder, SWT.NONE);
        tab.setText("Unused Elements");

        const composite = new Composite(tabFolder, SWT.NONE);
        tab.setControl(composite);
        GridLayoutFactory.fillDefaults().margins(10, 10).applyTo(composite);

        const table = new Table(composite, SWT.BORDER | SWT.FULL_SELECTION);
        table.setHeaderVisible(true);
        table.setLinesVisible(true);
        GridDataFactory.fillDefaults().grab(true, true).applyTo(table);

        const columns = ["Name", "Type", "ID"];
        columns.forEach((col) => {
            const column = new TableColumn(table, SWT.NONE);
            column.setText(col);
            column.setWidth(200);
        });

        this.results.unusedElements.forEach((element) => {
            const item = new TableItem(table, SWT.NONE);
            item.setText([element.name, element.type, element.id]);
        });
    },

    createViewComplexityTab: function (tabFolder) {
        const tab = new TabItem(tabFolder, SWT.NONE);
        tab.setText("View Complexity");

        const composite = new Composite(tabFolder, SWT.NONE);
        tab.setControl(composite);
        GridLayoutFactory.fillDefaults().numColumns(1).margins(10, 10).applyTo(composite);

        const labels = this.results.viewComplexity.map((view) => view.name);
        const elementData = this.results.viewComplexity.map((view) => view.elements);
        const relationshipData = this.results.viewComplexity.map((view) => view.relationships);

        const chartConfig = {
            type: "bar",
            data: {
                labels: labels,
                datasets: [
                    {
                        label: "Elements",
                        data: elementData,
                        backgroundColor: "rgba(75, 192, 192, 0.6)",
                        borderColor: "rgba(75, 192, 192, 1)",
                        borderWidth: 1,
                    },
                    {
                        label: "Relationships",
                        data: relationshipData,
                        backgroundColor: "rgba(255, 99, 132, 0.6)",
                        borderColor: "rgba(255, 99, 132, 1)",
                        borderWidth: 1,
                    },
                ],
            },
            options: {
                plugins: {
                    title: {
                        display: true,
                        text: "View Complexity",
                    },
                },
                scales: {
                    x: {
                        stacked: true,
                    },
                    y: {
                        stacked: true,
                    },
                },
            },
        };

        const chartBrowser = chartjsUtility.createChartWidget(
            composite,
            chartjsUtility.enhanceChartConfig(chartjsUtility.enhanceChartConfig(chartConfig))
        );
        GridDataFactory.fillDefaults().grab(true, true).hint(SWT.DEFAULT, 400).applyTo(chartBrowser);
    },

    createRecommendationsTab: function (tabFolder) {
        const tab = new TabItem(tabFolder, SWT.NONE);
        tab.setText("Recommendations");

        const composite = new Composite(tabFolder, SWT.NONE);
        tab.setControl(composite);
        GridLayoutFactory.fillDefaults().margins(10, 10).applyTo(composite);

        const recommendations = [
            "Clean up unused elements to improve model clarity.",
            "Add documentation to elements missing it for better understanding.",
            "Consider breaking down complex views (>50 elements) into smaller, more focused views.",
            "Ensure all relationships are bidirectional where appropriate.",
            "Validate that all elements are properly connected within their respective layers.",
        ];

        recommendations.forEach((rec) => {
            const label = new Label(composite, SWT.WRAP);
            label.setText("• " + rec);
            GridDataFactory.fillDefaults().grab(true, false).applyTo(label);
        });

        const actionButton = new Button(composite, SWT.PUSH);
        actionButton.setText("Generate Detailed Report");
        GridDataFactory.fillDefaults().align(SWT.CENTER, SWT.CENTER).applyTo(actionButton);
        actionButton.addListener(SWT.Selection, (e) => this.generateDetailedReport());
    },

    generateDetailedReport: function () {
        MessageDialog.openInformation(
            shell,
            "Report Generation",
            "A detailed report would be generated here. This could include in-depth analysis, charts, and recommendations."
        );
    },
};

// Run the enhanced model health check
modelHealthCheck.run();
