/**
 * @module PublishViewToConfluence
 * @description Publishes the currently selected view to a Confluence page with enhanced structure, Markdown support, and expandable element sections
 * @version 4.1
 * @author Claude AI Assistant
 * @lastModifiedDate 2024-08-08
 */

console.clear();
console.show();

const confluenceIntegration = require("./lib/confluenceIntegration");
const marked = require('./node_modules/marked/marked.min');
const jarchiLogger = require('./lib/jarchiLogger');
const log = jarchiLogger.createLogger('PublishViewToConfluence', __DIR__);

function preprocessMarkdown(content) {
    return content.replace(/(?<!\n)\n(?!\n)/g, "  \n");
}

function processMarkdown(content) {
    const preprocessed = preprocessMarkdown(content);
    return marked.parse(preprocessed);
}

function generateElementContent(element) {
    let content = `<ac:structured-macro ac:name="expand">
        <ac:parameter ac:name="title">${element.name} (${element.type})</ac:parameter>
        <ac:rich-text-body>`;
    
    if (element.documentation) {
        content += processMarkdown(element.documentation);
    }
    
    const properties = element.prop();
    if (properties.length > 0) {
        content += '<h4>Properties</h4><table><tbody><tr><th>Property</th><th>Value</th></tr>';
        properties.forEach(prop => {
            content += `<tr><td>${prop}</td><td>${element.prop(prop)}</td></tr>`;
        });
        content += '</tbody></table>';
    }
    
    content += '</ac:rich-text-body></ac:structured-macro>';
    
    return content;
}

async function publishViewToConfluence() {
    try {
        const selectedView = $(selection).filter("archimate-diagram-model").first();
        if (!selectedView) {
            log.error("No view selected");
            return;
        }

        const confluenceSettings = confluenceIntegration.readConfluenceSettings();
        if (!confluenceSettings.baseUrl || !confluenceSettings.spaceKey || !confluenceSettings.username || !confluenceSettings.apiToken) {
            log.error("Confluence settings not properly configured");
            return;
        }

        const pageTitle = selectedView.name;
        log.info(`Publishing view to Confluence`, { pageTitle });

        const viewImage = $.model.renderViewAsBase64(selectedView, "PNG", { scale: 2, margin: 20 });

        let pageContents = `<h1>${pageTitle}</h1>`;

        // View Diagram
        const imageFileName = `${pageTitle.replace(/[^a-z0-9]/gi, "_").toLowerCase()}_diagram.png`;
        const imageContent = `<ac:image ac:align="center" ac:layout="center" ac:alt="${pageTitle} Diagram">
            <ri:attachment ri:filename="${imageFileName}" />
        </ac:image>`;
        pageContents += `<h2>View Diagram</h2>${imageContent}`;

        // View Documentation
        if (selectedView.documentation) {
            pageContents += `<h2>View Documentation</h2>${processMarkdown(selectedView.documentation)}`;
        }

        // Elements
        pageContents += `<h2>Elements</h2>`;
        $(selectedView).find("element").each((element) => {
            pageContents += generateElementContent(element);
        });

        let pageInfo = await confluenceIntegration.getPageInfo(pageTitle);
        if (!pageInfo) {
            log.info("Creating new page", { pageTitle });
            pageInfo = { pageId: "", pageVersion: 0 };
        } else {
            log.info("Updating existing page", { pageTitle, pageId: pageInfo.pageId });
        }

        const result = await confluenceIntegration.updateConfluencePage(
            pageInfo.pageId,
            null,  // parentId
            pageTitle,
            pageInfo.pageVersion + 1,
            pageContents
        );

        log.info(`Page updated successfully`, { pageTitle, pageId: result.pageId, version: result.pageVersion });

        const attachmentComment = "View diagram";
        const attachmentResult = await confluenceIntegration.attachFile(
            result.pageId,
            imageFileName,
            viewImage,
            "image",
            attachmentComment
        );

        log.info(`Image attached successfully`, { fileName: imageFileName, attachmentId: attachmentResult.id, version: attachmentResult.version });

        const pageUrl = `${confluenceSettings.baseUrl}/wiki/spaces/${confluenceSettings.spaceKey}/pages/${result.pageId}`;
        log.info(`View published successfully`, { pageUrl });
    } catch (error) {
        log.error("An error occurred while publishing view", { error: error.toString() });
    }
}

publishViewToConfluence();