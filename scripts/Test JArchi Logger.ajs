/**
 * @name Test JArchi Logger
 * @version 1.4
 * @description Test script to exercise the JArchi Logger API, including the new markdown logging capability
 */

console.clear();
console.show();

const jarchiLogger = require('./lib/jarchiLogger');
const log = jarchiLogger.createLogger('TestJArchiLogger', __DIR__);

// Import Java's Thread class
const Thread = Java.type('java.lang.Thread');

// Function to simulate an asynchronous operation
function simulateAsyncOperation(callback) {
    try {
        Thread.sleep(1000);
        callback();
    } catch (e) {
        console.error("Error in simulateAsyncOperation:", e);
    }
}

// Test basic logging
console.log("Testing basic logging...");
log.info('This is a basic log message');

// Test logging with additional data
console.log("Testing logging with additional data...");
log.info('Log with additional data', { userId: 123, action: 'test' });

// Test logging with different log levels
console.log("Testing different log levels...");
log.debug('Debug level message');
log.info('Info level message');
log.warn('Warning level message');
log.error('Error level message');

// Test logging in a loop
console.log("Testing logging in a loop...");
for (let i = 0; i < 5; i++) {
    log.info(`Log message ${i + 1}`);
}

// Test logging in an asynchronous context
console.log("Testing logging in asynchronous context...");
simulateAsyncOperation(() => {
    log.info('Log from async operation');
});

// Test error handling (by logging an error)
console.log("Testing error logging...");
try {
    throw new Error("This is a test error");
} catch (error) {
    log.error('An error occurred', { error: error.toString(), stack: error.stack });
}

// Test markdown logging
console.log("Testing markdown logging...");

// Test headers
log.markdown(`
# Header 1
## Header 2
### Header 3
#### Header 4
##### Header 5
###### Header 6
`);

// Test emphasis
log.markdown(`
*This text is italicized*
_This text is also italicized_

**This text is bold**
__This text is also bold__

***This text is bold and italicized***
`);

// Test lists
log.markdown(`
Unordered list:
- Item 1
- Item 2
  - Subitem 2.1
  - Subitem 2.2
- Item 3

Ordered list:
1. First item
2. Second item
3. Third item
   1. Subitem 3.1
   2. Subitem 3.2
`);

// Test links and images
log.markdown(`[Link to Google](https://www.google.com)`);

// Test code blocks
log.markdown(`
Inline \`code\` has \`back-ticks around\` it.

\`\`\`javascript
function example() {
    console.log("This is a code block");
}
\`\`\`
`);

// Test blockquotes
log.markdown(`
> This is a blockquote.
> It can span multiple lines.
>
> It can also have multiple paragraphs.
`);

// Test tables
log.markdown(`
| Column 1 | Column 2 | Column 3 |
|----------|----------|----------|
| Row 1, Col 1 | Row 1, Col 2 | Row 1, Col 3 |
| Row 2, Col 1 | Row 2, Col 2 | Row 2, Col 3 |
`);

// Test horizontal rules
log.markdown(`
Above the line

---

Below the line
`);

// Test task lists
log.markdown(`
- [x] Completed task
- [ ] Incomplete task
- [x] Another completed task
`);

// Test strikethrough
log.markdown(`
This ~~is strikethrough~~ text.
`);

// Test footnotes
log.markdown(`
Here's a sentence with a footnote. [^1]

[^1]: This is the footnote.
`);

// Test definition lists
log.markdown(`
Term 1
: Definition 1

Term 2
: Definition 2a
: Definition 2b
`);

// Test emoji
log.markdown(`
:smile: :heart: :thumbsup:
`);

console.log("Test script completed. Check the logger server or its console for the results.");

// Wait for a moment to allow async operations to complete
Thread.sleep(2000);
console.log("Script execution finished.");