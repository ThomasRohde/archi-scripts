/**
 * @name Test JArchi Logger
 * @version 1.2
 * @description Test script to exercise the JArchi Logger API (Updated for new logging approach)
 */

console.clear();
console.show();

const jarchiLogger = require('./lib/jarchiLogger');
jarchiLogger.init('TestJArchiLogger');

// Create shorthand logging functions
const log = {
    debug: jarchiLogger.debug.bind(jarchiLogger),
    info: jarchiLogger.info.bind(jarchiLogger),
    warn: jarchiLogger.warn.bind(jarchiLogger),
    error: jarchiLogger.error.bind(jarchiLogger)
};

// Import Java's Thread class
const Thread = Java.type('java.lang.Thread');

// Function to simulate an asynchronous operation
function simulateAsyncOperation(callback) {
    try {
        // Sleep for 1 second
        Thread.sleep(1000);
        callback();
    } catch (e) {
        console.error("Error in simulateAsyncOperation:", e);
    }
}

// Test basic logging
console.log("Testing basic logging...");
log.info('This is a basic log message');

// Test logging with additional data
console.log("Testing logging with additional data...");
log.info('Log with additional data', { userId: 123, action: 'test' });

// Test logging with different log levels
console.log("Testing different log levels...");
log.debug('Debug level message');
log.info('Info level message');
log.warn('Warning level message');
log.error('Error level message');

// Test logging in a loop
console.log("Testing logging in a loop...");
for (let i = 0; i < 5; i++) {
    log.info(`Log message ${i + 1}`);
}

// Test logging in an asynchronous context
console.log("Testing logging in asynchronous context...");
simulateAsyncOperation(() => {
    log.info('Log from async operation');
});

// Test error handling (by logging an error)
console.log("Testing error logging...");
try {
    throw new Error("This is a test error");
} catch (error) {
    log.error('An error occurred', { error: error.toString(), stack: error.stack });
}

console.log("Test script completed. Check the logger server or its console for the results.");

// Wait for a moment to allow async operations to complete
Thread.sleep(2000);
console.log("Script execution finished.");