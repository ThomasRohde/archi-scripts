/**
 * @module IntelligentModelAnalyzer
 * @description An intelligent analyzer for ArchiMate models using Ollama LLM
 * @version 1.0
 * @author Claude AI Assistant
 * @lastModifiedDate 2024-07-31
 */

console.clear();
console.show();

const { OllamaClient, Message, ROLES, GenerateOptions } = require('./lib/ollamaClient');
const modelTraversal = require('./lib/modelTraversal');

const ollamaClient = new OllamaClient('http://localhost:11434');
const MODEL_NAME = 'llama3.1';  // Adjust this to the model you have installed in Ollama

async function analyzeModel() {
    console.log("Starting Intelligent Model Analysis...");

    const elementAnalysis = [];
    const viewAnalysis = [];
    let modelOverview = "";

    const handlers = {
        elementHandler: (element) => {
            elementAnalysis.push({
                name: element.name,
                type: element.type,
                documentation: element.documentation
            });
        },
        viewHandler: (view) => {
            viewAnalysis.push({
                name: view.name,
                elementCount: $(view).children("element").size(),
                relationshipCount: $(view).children("relationship").size()
            });
        }
    };
    
    modelTraversal.traverse(handlers);
    modelOverview = await generateModelOverview(elementAnalysis, viewAnalysis);
    console.log("\nModel Overview:");
    console.log(modelOverview);

    for (const element of elementAnalysis) {
        const analysis = await analyzeElement(element);
        console.log(`\nAnalysis for ${element.name} (${element.type}):`);
        console.log(analysis);

        if (element.documentation) {
            const improvedDoc = await improveDocumentation(element);
            console.log("Improved Documentation:");
            console.log(improvedDoc);
        }
    }

    for (const view of viewAnalysis) {
        const viewInsights = await analyzeView(view);
        console.log(`\nInsights for view "${view.name}":`);
        console.log(viewInsights);
    }

    console.log("\nIntelligent Model Analysis completed.");
}

async function generateModelOverview(elements, views) {
    const prompt = `As an ArchiMate expert, provide a brief overview of the following model:
    - Total elements: ${elements.length}
    - Element types: ${[...new Set(elements.map(e => e.type))].join(', ')}
    - Total views: ${views.length}
    - Largest view: "${views.sort((a, b) => b.elementCount - a.elementCount)[0].name}" with ${views[0].elementCount} elements and ${views[0].relationshipCount} relationships

    Provide insights on the model's completeness, balance between different layers, and any potential areas for improvement.`;

    const options = new GenerateOptions({ stream: false });
    const response = await ollamaClient.generateChatCompletion(MODEL_NAME, [new Message(ROLES.USER, prompt)], options);
    return response.message.content;
}

async function analyzeElement(element) {
    const prompt = `As an ArchiMate expert, analyze the following element:
    Name: ${element.name}
    Type: ${element.type}
    Documentation: ${element.documentation || "None"}

    Provide insights on:
    1. The appropriateness of the element type
    2. Potential relationships it should have (based on common ArchiMate practices)
    3. Suggestions for improving its representation in the model`;

    const options = new GenerateOptions({ stream: false });
    const response = await ollamaClient.generateChatCompletion(MODEL_NAME, [new Message(ROLES.USER, prompt)], options);
    return response.message.content;
}

async function improveDocumentation(element) {
    const prompt = `As an ArchiMate expert, improve the following element documentation:
    Element Name: ${element.name}
    Element Type: ${element.type}
    Current Documentation: ${element.documentation}

    Provide an improved version of the documentation that:
    1. Is more comprehensive and clear
    2. Follows best practices for ArchiMate documentation
    3. Includes any missing crucial information for this type of element`;

    const options = new GenerateOptions({ stream: false });
    const response = await ollamaClient.generateChatCompletion(MODEL_NAME, [new Message(ROLES.USER, prompt)], options);
    return response.message.content;
}

async function analyzeView(view) {
    const prompt = `As an ArchiMate expert, analyze the following view:
    Name: ${view.name}
    Element Count: ${view.elementCount}
    Relationship Count: ${view.relationshipCount}

    Provide insights on:
    1. The complexity of the view (is it too complex or too simple?)
    2. Suggestions for improving the view's clarity and effectiveness
    3. Potential missing elements or relationships that could enhance the view`;

    const options = new GenerateOptions({ stream: false });
    const response = await ollamaClient.generateChatCompletion(MODEL_NAME, [new Message(ROLES.USER, prompt)], options);
    return response.message.content;
}

// Run the analysis
analyzeModel().catch(error => console.error("Error during analysis:", error));