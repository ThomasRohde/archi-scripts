/**
 * @name Generate Capability Model
 * @description This script generates an ArchiMate capability model using the Anthropic API, iteratively refining the model.
 * @version 1.1
 * @author Claude AI Assistant
 * @lastModifiedDate 2024-08-13
 */

console.clear();
console.show();

const { LLMClient, LLMMessage, LLMGenerateOptions, ROLES } = require('./lib/llm');
const layoutDagre = require('./lib/layoutDagre');
const modelManipulation = require('./lib/modelManipulation');

// Initialize logger
const jarchiLogger = require('./lib/jarchiLogger');
const log = jarchiLogger.createLogger('GenerateCapabilityModel', __DIR__);

// Initialize LLM client
const llmClient = new LLMClient('anthropic');
// const llmClient = new LLMClient('ollama');

// Constants
const ITERATIONS = 4;
const MODEL = 'claude-3-haiku-20240307';
// const MODEL = 'llama3.1';

// Function to get user input
function getUserInput(prompt) {
    return window.prompt(prompt);
}

// Function to generate capability model using LLM
async function generateCapabilityModel(userDescription, previousModel = null, iteration = 1) {
    let prompt = `You are an AI assistant tasked with expanding an ArchiMate capability model. Your goal is to analyze the existing model and suggest new capabilities to add, ensuring a balanced and hierarchical structure.

    Here is the user's description of the organization:
    <user_description>
    ${userDescription}
    </user_description>
    
    This is iteration ${iteration} of ${ITERATIONS}. 
    
    Previous model:
    <previous_model>
    ${JSON.stringify(previousModel, null, 2)}
    </previous_model>
    
    For this iteration, follow these guidelines:
    
    1. Iteration 1: Create a broad set of top-level capabilities that cover the main areas of the organization. Each of these should have 2-3 immediate sub-capabilities.
    
    2. Iteration 2: Focus on expanding the breadth of the model. Add more sub-capabilities to each top-level capability, ensuring a balanced structure.
    
    3. Iteration 3 and beyond: Deepen the model by adding more specific sub-capabilities to the existing structure.
    
    IMPORTANT: Every new capability MUST have a parent from the existing model. Do not create orphaned capabilities.
    
    Please suggest new capabilities to add to this model. Your response should be a JSON object with the following structure:
    
    <json_structure>
    {
        "new_capabilities": [
            {
                "id": "<unique id>",
                "type": "capability",
                "name": "<name of capability>",
                "description": "<description of capability>",
                "parent": "<id of parent capability>"
            },
            ... more new capabilities ...
        ]
    }
    </json_structure>
    
    Guidelines:
    1. Only suggest new capabilities to add to the existing model.
    2. EVERY new capability MUST have a parent from the existing model.
    3. Provide clear and concise names and descriptions for each new capability.
    4. Ensure each new capability has a unique ID (e.g., "cap1", "cap2", etc.).
    5. Focus on creating a balanced hierarchy, with a good mix of breadth and depth.
    6. Avoid creating duplicate capabilities or those with very similar names/functions.
    
    After analyzing the existing model and suggesting new capabilities, format your response as a valid JSON object. Enclose the entire JSON object within <capability_model_update> tags.`;

    const messages = [new LLMMessage(ROLES.USER, prompt)];

    const options = new LLMGenerateOptions({
        model: MODEL,
        maxTokens: 4096,
        temperature: 0.7
    });

    try {
        const response = await llmClient.generateChatCompletion(messages, options);
        const content = response.content;
        
        log.markdown(content.replace(/<capability_model_update>[\s\S]*?<\/capability_model_update>/, ''));

        const jsonMatch = content.match(/<capability_model_update>([\s\S]*?)<\/capability_model_update>/);
        if (jsonMatch) {
            const jsonObject = JSON.parse(jsonMatch[1]);
            log.code(jsonObject);
            return jsonObject;
        } else {
            throw new Error("JSON structure not found in the response");
        }
    } catch (error) {
        log.error('Error generating capability model', { error: error.toString() });
        throw error;
    }
}

function integrateUpdates(fullModel, updates) {
    if (!fullModel) {
        fullModel = { nodes: [], relationships: [] };
    }

    updates.new_capabilities.forEach(newCap => {
        fullModel.nodes.push(newCap);
        if (newCap.parent) {
            fullModel.relationships.push({
                source: newCap.parent,
                target: newCap.id,
                type: "composition-relationship"
            });
        }
    });

    return fullModel;
}

const ONLY_LAYOUT = false; // Set this to false to generate a new model
// Layout constants
const PADDING = 10;                 // Padding inside each capability box
const HORIZONTAL_SPACING = 30;      // Spacing between top-level capabilities
const VERTICAL_SPACING = 10;        // Vertical spacing between child capabilities
const MIN_WIDTH = 300;              // Minimum width for any capability box
const LEAF_NODE_HEIGHT = 30;        // Height for leaf nodes (capabilities without children)
const CHARACTER_WIDTH = 10;         // Estimated width per character for calculating box widths
const ROOT_PADDING = 20;            // Extra padding for the root container
const PARENT_CHILD_TOP_PADDING = 20; // Padding between a parent and its first child

// Color palette for different levels
const COLOR_PALETTE = [
    "#E6F3FF", // Light Blue
    "#FFF0E6", // Light Peach
    "#E6FFE6", // Light Green
    "#F2E6FF", // Light Purple
    "#FFFFE6"  // Light Yellow
];

// Main execution
(async function() {
    try {
        if (ONLY_LAYOUT) {
            let view = $(selection).filter("archimate-diagram-model").first();
            if (!view) {
                log.warn('No view selected. Please select a view and run the script again.');
                return;
            }
            log.info('Applying custom layout to existing model');
            customCapabilityLayout(view);
            log.info('Layout complete');
        } else {
            const userDescription = getUserInput("Describe the organization for which you want to create a capability model:");
            if (userDescription) {
                log.info('Generating capability model');
                let view = $(selection).filter("archimate-diagram-model").first();
                if (!view) {
                    view = model.createArchimateView("Generated Capability Model");
                }

                let fullModel = null;

                for (let i = 1; i <= ITERATIONS; i++) {
                    log.info(`Iteration ${i} of ${ITERATIONS}`);
                    const modelUpdates = await generateCapabilityModel(userDescription, fullModel, i);
                    
                    // Integrate updates into the full model
                    fullModel = integrateUpdates(fullModel, modelUpdates);
                    
                    // Update the model in Archi
                    const updates = modelManipulation.updateModel(fullModel);
                    log.info(`Model updated (iteration ${i})`);
                    log.debug('Model updates', updates);
                }

                // Apply custom layout
                customCapabilityLayout(view);

                log.info('Capability model generation and layout complete');
            } else {
                log.warn('User cancelled or provided no description');
            }
        }
    } catch (error) {
        log.error('Error in main execution', { error: error.toString() });
    }
})();

function customCapabilityLayout(view) {
    const rootCapabilities = $("element").filter(e => {
        if (e.type !== "capability") return false;
        const incomingCompositions = $(e).inRels().filter(r => r.type === "composition-relationship");
        return incomingCompositions.size() === 0;
    });

    let x = ROOT_PADDING;
    let y = ROOT_PADDING;

    const maxWidth = calculateMaxWidth(rootCapabilities);

    rootCapabilities.each((rootCapability, index) => {
        const [width, height] = layoutCapability(view, rootCapability, x, y, maxWidth, 0);
        x += width + HORIZONTAL_SPACING;
    });
}

function calculateMaxWidth(capabilities) {
    let maxWidth = 0;
    capabilities.each(capability => {
        const width = calculateCapabilityWidth(capability);
        maxWidth = Math.max(maxWidth, width);
    });
    return maxWidth + 2 * PADDING; // Add padding on both sides
}

function calculateCapabilityWidth(capability) {
    return Math.max(MIN_WIDTH, capability.name.length * CHARACTER_WIDTH);
}

function layoutCapability(view, capability, x, y, maxWidth, level) {
    const children = getCapabilityChildren(capability);
    
    let currentY = y + PADDING;
    let totalHeight = PADDING;

    const capabilityInView = view.add(capability, x, y, maxWidth, 0); // Height will be set later
    capabilityInView.showIcon = 2;

    if (children.size() === 0) {
        capabilityInView.fillColor = "#F0F0F0"; // Light grey for leaf nodes
        capabilityInView.textPosition = 1;
        totalHeight += LEAF_NODE_HEIGHT;
    } else {
        capabilityInView.fillColor = COLOR_PALETTE[level % COLOR_PALETTE.length];
        capabilityInView.textPosition = 0;

        // Add the new PARENT_CHILD_TOP_PADDING here
        currentY += PARENT_CHILD_TOP_PADDING;
        totalHeight += PARENT_CHILD_TOP_PADDING;

        children.each(child => {
            const [childWidth, childHeight] = layoutCapability(view, child, x + PADDING, currentY, maxWidth - 2*PADDING, level + 1);
            currentY += childHeight + VERTICAL_SPACING;
            totalHeight += childHeight + VERTICAL_SPACING;
        });

        totalHeight += PADDING; // Add bottom padding
    }

    // Set the final height of the capability
    capabilityInView.bounds = {
        x: x,
        y: y,
        width: maxWidth,
        height: totalHeight
    };

    return [maxWidth, totalHeight];
}

function getCapabilityChildren(capability) {
    return $("element").filter(e => {
        if (e.type !== "capability") return false;
        const incomingCompositions = $(e).inRels().filter(r => r.type === "composition-relationship" && r.source.id === capability.id);
        return incomingCompositions.size() > 0;
    });
}