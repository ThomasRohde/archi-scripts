/**
 * @name Chart.js Test
 * @version 2.3
 * @description Test script to demonstrate using Chart.js utility module in a TitleAreaDialog with correct button creation
 */

(function() {
    console.clear();
    console.show();

    // Import necessary Java types and our utility module
    const SWT = Java.type('org.eclipse.swt.SWT');
    const GridLayout = Java.type('org.eclipse.swt.layout.GridLayout');
    const GridData = Java.type('org.eclipse.swt.layout.GridData');
    const Label = Java.type('org.eclipse.swt.widgets.Label');
    const Composite = Java.type('org.eclipse.swt.widgets.Composite');
    const TitleAreaDialog = Java.type('org.eclipse.jface.dialogs.TitleAreaDialog');
    const IDialogConstants = Java.type('org.eclipse.jface.dialogs.IDialogConstants');
    const chartjsUtility = require('./lib/chartjsUtility');

    // Function to get element counts by type
    function getElementCounts() {
        const counts = {};
        $('element').each(function(element) {
            counts[element.type] = (counts[element.type] || 0) + 1;
        });
        return counts;
    }

    // Get element counts
    const elementCounts = getElementCounts();

    // Prepare data for Chart.js
    const labels = Object.keys(elementCounts);
    const data = Object.values(elementCounts);

    // Create Chart.js configuration
    const chartConfig = {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Element Count',
                data: data,
                backgroundColor: 'rgba(75, 192, 192, 0.6)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            plugins: {
                title: {
                    display: true,
                    text: 'Element Types in Archi Model'
                }
            }
        }
    };

    // Create a custom dialog
    const customDialog = {
        dialog: new (Java.extend(TitleAreaDialog))(shell, {
            createDialogArea: function(parent) {
                const area = Java.super(customDialog.dialog).createDialogArea(parent);
                const container = new Composite(area, SWT.NONE);
                container.setLayoutData(new GridData(GridData.FILL_BOTH));
                container.setLayout(new GridLayout(1, false));

                new Label(container, SWT.NONE).setText("Model Analysis Chart");

                // Create the chart using our utility module
                const chartBrowser = chartjsUtility.createChartWidget(container, chartConfig);
                chartBrowser.setLayoutData(new GridData(GridData.FILL_BOTH));

                return area;
            },

            configureShell: function(newShell) {
                Java.super(customDialog.dialog).configureShell(newShell);
                newShell.setText("Model Analysis");
                newShell.setSize(800, 600);
            },

            createButtonsForButtonBar: function(parent) {
                Java.super(customDialog.dialog).createButton(
                    parent, 
                    IDialogConstants.OK_ID, 
                    "Close", 
                    true
                );
            }
        }),

        open: function() {
            return this.dialog.open();
        }
    };

    // Open the dialog
    customDialog.open();

    console.log("Chart.js test dialog opened. Close the dialog to end the script.");
})();