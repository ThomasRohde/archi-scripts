/**
 * JArchi Script Menu
 * @module Menu
 * @description This script creates a graphical user interface for managing and executing JArchi scripts.
 * It provides a tree-based menu structure for organizing scripts into categories and allows
 * users to view script descriptions and tutorials before execution.
 * @version 1.4
 * @author Thomas Klok Rohde
 * @lastModifiedBy Claude AI Assistant (Anthropic)
 * @lastModifiedDate 2024-08-07
 */

(function () {
    const SWT = Java.type("org.eclipse.swt.SWT");
    const GridData = Java.type("org.eclipse.swt.layout.GridData");
    const GridDataFactory = Java.type("org.eclipse.jface.layout.GridDataFactory");
    const GridLayoutFactory = Java.type("org.eclipse.jface.layout.GridLayoutFactory");
    const TreeWidget = Java.type("org.eclipse.swt.widgets.Tree");
    const TreeItemWidget = Java.type("org.eclipse.swt.widgets.TreeItem");
    const CompositeWidget = Java.type("org.eclipse.swt.widgets.Composite");
    const SashFormWidget = Java.type("org.eclipse.swt.custom.SashForm");
    const BrowserWidget = Java.type("org.eclipse.swt.browser.Browser");
    const TitleAreaDialog = Java.extend(Java.type("org.eclipse.jface.dialogs.TitleAreaDialog"));
    const IDialogConstants = Java.type("org.eclipse.jface.dialogs.IDialogConstants");
    const IMessageProvider = Java.type("org.eclipse.jface.dialogs.IMessageProvider");
    const IArchiImages = Java.type("com.archimatetool.editor.ui.IArchiImages");

    // Load common styles and menu items
    load(__DIR__ + "lib/commonStyles.js");
    load(__DIR__ + "lib/menuItems.js");

    // Get monitor dimensions for responsive sizing
    const monitorWidth = shell.getDisplay().getPrimaryMonitor().getBounds().width;
    const monitorHeight = shell.getDisplay().getPrimaryMonitor().getBounds().height;

    // Initialize logger
    const jarchiLogger = require('./lib/jarchiLogger');
    const log = jarchiLogger.createLogger('Menu', __DIR__);

    /**
     * Main dialog object for the JArchi Script Menu.
     * This object encapsulates all the functionality for creating and managing the dialog.
     */
    const menuDialog = {
        treeWidget: null,
        descriptionBrowser: null,
        executeButton: null,
        tutorialButton: null,
        selectedScript: null,
        dialogResult: null,

        /**
         * Opens the dialog and returns the result.
         * @returns {boolean} True if the dialog was closed normally, false otherwise.
         */
        open: function () {
            return this.dialog.open() == 0; // OK = 0, Cancel = 1, Closed = -1
        },

        /**
         * The main dialog implementation.
         */
        dialog: new TitleAreaDialog(shell, {
            /**
             * Creates the dialog.
             * @override
             */
            create: function () {
                Java.super(menuDialog.dialog).create();
                this.setupDialogProperties();
            },

            /**
             * Creates the dialog area.
             * @override
             * @param {CompositeWidget} parent - The parent composite.
             * @returns {CompositeWidget} The created dialog area.
             */
            createDialogArea: function (parent) {
                const area = Java.super(menuDialog.dialog).createDialogArea(parent);
                const clientArea = this.createClientArea(area);
                const sashForm = this.createSashForm(clientArea);
                this.createTreeWidget(sashForm);
                this.createDescriptionArea(sashForm);
                sashForm.setWeights([1, 4]); // Set initial 40/60 split
                return area;
            },

            /**
             * Sets up the dialog properties such as title, message, and icon.
             */
            setupDialogProperties: function () {
                menuDialog.dialog.setTitle("JArchi Script Menu");
                menuDialog.dialog.setMessage(
                    "Select a script to view its description and execute it.",
                    IMessageProvider.NONE
                );
                menuDialog.dialog.setTitleImage(IArchiImages.ImageFactory.getImage(IArchiImages.ICON_APP_64));
            },

            /**
             * Creates the client area of the dialog.
             * @param {CompositeWidget} parent - The parent composite.
             * @returns {CompositeWidget} The created client area.
             */
            createClientArea: function (parent) {
                const clientArea = new CompositeWidget(parent, SWT.NONE);
                const data = new GridData(SWT.FILL, SWT.FILL, true, true);
                data.widthHint = monitorWidth / 2.5;
                data.heightHint = monitorHeight / 3;
                GridLayoutFactory.fillDefaults().numColumns(1).margins(0, 0).spacing(0, 0).applyTo(clientArea);
                clientArea.setLayoutData(data);
                return clientArea;
            },

            /**
             * Creates the SashForm that splits the dialog into two panes.
             * @param {CompositeWidget} parent - The parent composite.
             * @returns {SashFormWidget} The created SashForm.
             */
            createSashForm: function (parent) {
                const sashForm = new SashFormWidget(parent, SWT.HORIZONTAL);
                GridDataFactory.fillDefaults().grab(true, true).applyTo(sashForm);
                return sashForm;
            },

            /**
             * Creates the tree widget for displaying script categories and names.
             * @param {SashFormWidget} parent - The parent SashForm.
             */
            createTreeWidget: function (parent) {
                menuDialog.treeWidget = new TreeWidget(parent, SWT.VIRTUAL | SWT.BORDER);
                this.populateTree();
                this.addTreeSelectionListener();
            },

            /**
             * Populates the tree widget with script categories and names.
             */
            populateTree: function () {
                const categories = {};
                menuItems.forEach((item) => {
                    if (!categories[item.category]) {
                        categories[item.category] = new TreeItemWidget(menuDialog.treeWidget, SWT.NONE);
                        categories[item.category].setText(item.category);
                    }
                    const treeItem = new TreeItemWidget(categories[item.category], SWT.NONE);
                    treeItem.setText(item.name);
                    treeItem.setData(item);
                });
            },

            /**
             * Adds a selection listener to the tree widget.
             */
            addTreeSelectionListener: function () {
                menuDialog.treeWidget.addSelectionListener({
                    widgetSelected: function (e) {
                        const selection = menuDialog.treeWidget.getSelection()[0];
                        const item = selection.getData();
                        menuDialog.updateDescriptionAndButtons(item);
                    },
                });
            },

            /**
             * Creates the description area for displaying script details.
             * @param {SashFormWidget} parent - The parent SashForm.
             */
            createDescriptionArea: function (parent) {
                const rightPanel = new CompositeWidget(parent, SWT.NONE);
                GridLayoutFactory.fillDefaults().numColumns(1).applyTo(rightPanel);

                menuDialog.descriptionBrowser = new BrowserWidget(rightPanel, SWT.BORDER);
                GridDataFactory.fillDefaults()
                    .grab(true, true)
                    .hint(SWT.DEFAULT, SWT.DEFAULT)
                    .applyTo(menuDialog.descriptionBrowser);
            },

            /**
             * Creates the buttons for the button bar.
             * @override
             * @param {CompositeWidget} parent - The parent composite.
             */
            createButtonsForButtonBar: function (parent) {
                menuDialog.tutorialButton = Java.super(menuDialog.dialog).createButton(
                    parent,
                    IDialogConstants.HELP_ID,
                    "View Tutorial",
                    false
                );
                menuDialog.executeButton = Java.super(menuDialog.dialog).createButton(
                    parent,
                    IDialogConstants.OK_ID,
                    "Execute",
                    true
                );
                Java.super(menuDialog.dialog).createButton(parent, IDialogConstants.CANCEL_ID, "Cancel", false);
                menuDialog.executeButton.setEnabled(false);
                menuDialog.tutorialButton.setEnabled(false);

                menuDialog.tutorialButton.addSelectionListener({
                    widgetSelected: function (e) {
                        menuDialog.loadTutorial();
                    },
                });
            },

            /**
             * Handles button press events.
             * @override
             * @param {number} buttonId - The ID of the pressed button.
             */
            buttonPressed: function (buttonId) {
                if (buttonId === IDialogConstants.OK_ID) {
                    this.handleExecuteButton();
                } else if (buttonId === IDialogConstants.HELP_ID) {
                    menuDialog.loadTutorial();
                } else {
                    Java.super(menuDialog.dialog).buttonPressed(buttonId);
                }
            },

            /**
             * Handles the Execute button press.
             */
            handleExecuteButton: function () {
                if (menuDialog.selectedScript) {
                    menuDialog.dialogResult = menuDialog.selectedScript;
                    Java.super(menuDialog.dialog).okPressed();
                } else {
                    window.alert("Please select a script to execute.");
                }
            },

            /**
             * Creates the help control (hidden in this implementation).
             * @override
             * @param {CompositeWidget} parent - The parent composite.
             * @returns {Control} The created help control.
             */
            createHelpControl: function (parent) {
                const help = Java.super(menuDialog.dialog).createHelpControl(parent);
                help.setVisible(false);
                return help;
            },

            /**
             * Determines if the dialog is resizable.
             * @override
             * @returns {boolean} True if the dialog is resizable, false otherwise.
             */
            isResizable: function () {
                return true;
            },
        }),

        /**
         * Updates the description area and buttons based on the selected item.
         * @param {Object} item - The selected menu item.
         * @param {string} item.name - The name of the script.
         * @param {string} item.description - HTML description of the script.
         * @param {string} item.script - The filename of the script to execute.
         * @param {string} item.category - The category of the script.
         * @param {string} [item.tutorial] - The filename of the tutorial HTML file.
         */
        updateDescriptionAndButtons: function (item) {
            if (item) {
                let descriptionHtml = commonStyles + item.description;
                this.descriptionBrowser.setText(descriptionHtml);
                this.selectedScript = item.script;
                if (this.executeButton) {
                    this.executeButton.setEnabled(true);
                }
                if (this.tutorialButton) {
                    this.tutorialButton.setEnabled(!!item.tutorial);
                }
                log.info('Script selected: ' + item.name, { scriptName: item.name, category: item.category });
            } else {
                this.descriptionBrowser.setText(/* HTML */ `
                    ${commonStyles}
                    <h1>Welcome to the JArchi Script Menu!</h1>
                    <p>This menu system allows you to easily access and execute various JArchi scripts.</p>
                    <h2>To get started:</h2>
                    <ol>
                        <li>Browse through the categories in the left panel.</li>
                        <li>Click on a specific script to view its description here.</li>
                        <li>Once you've selected a script, click 'Execute' to run it.</li>
                        <li>If available, click 'View Tutorial' for more detailed information about the script.</li>
                    </ol>
                    <p>
                        Each script is designed to help you with different aspects of your Archimate modeling. Explore
                        the options and find the tools that best suit your needs!
                    </p>
                `);
                this.selectedScript = null;
                if (this.executeButton) {
                    this.executeButton.setEnabled(false);
                }
                if (this.tutorialButton) {
                    this.tutorialButton.setEnabled(false);
                }
            }
        },

        /**
         * Loads the tutorial into the browser component.
         */
        loadTutorial: function () {
            const selection = this.treeWidget.getSelection()[0];
            const item = selection.getData();
            if (item && item.tutorial) {
                const File = Java.type("java.io.File");
                const fullTutorialFileName = "tutorial-" + item.tutorial + ".html";
                const tutorialPath = new File(new File(__DIR__, "docs"), fullTutorialFileName).getAbsolutePath();

                if (java.nio.file.Files.exists(java.nio.file.Paths.get(tutorialPath))) {
                    this.descriptionBrowser.setUrl("file://" + tutorialPath);
                    log.info('Tutorial loaded', { scriptName: item.name, tutorialFile: fullTutorialFileName });
                } else {
                    this.descriptionBrowser.setText(
                        commonStyles +
                            /* HTML */ `
                                <h2>Tutorial Not Found</h2>
                                <p>
                                    The tutorial file "${fullTutorialFileName}" could not be found at path:
                                    ${tutorialPath}
                                </p>
                                <p>Please check the file name and location, then try again.</p>
                            `
                    );
                    log.warn('Tutorial not found', { scriptName: item.name, tutorialFile: fullTutorialFileName, path: tutorialPath });
                }
            }
        },
    };

    /**
     * Opens the dialog and handles the result.
     * @throws {Error} If an error occurs while running the script menu.
     */
    try {
        log.info('Opening JArchi Script Menu');
        if (menuDialog.open()) {
            log.info('Dialog closed normally');
            if (menuDialog.dialogResult) {
                log.info('Executing script', { execute_script: menuDialog.dialogResult });
                load(menuDialog.dialogResult);
            }
        } else {
            log.info('Dialog cancelled or closed abnormally');
        }
    } catch (error) {
        log.error('An error occurred while running the script menu', { error: error.toString() });
    }
})();